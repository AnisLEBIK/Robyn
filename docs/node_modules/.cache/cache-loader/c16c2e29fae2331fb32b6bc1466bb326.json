{"remainingRequest":"/Users/leonelsentana/Robyn/docs/node_modules/babel-loader/lib/index.js??ref--11-1!/Users/leonelsentana/Robyn/docs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/Users/leonelsentana/Robyn/docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/Users/leonelsentana/Robyn/docs/docs/doc3.md","dependencies":[{"path":"/Users/leonelsentana/Robyn/docs/docs/doc3.md","mtime":1604583336000},{"path":"/Users/leonelsentana/Robyn/docs/.docusaurus/docusaurus-plugin-content-docs/site-docs-doc-3-md-616.json","mtime":1605866086848},{"path":"/Users/leonelsentana/Robyn/docs/node_modules/cache-loader/dist/cjs.js","mtime":1604583336000},{"path":"/Users/leonelsentana/Robyn/docs/node_modules/babel-loader/lib/index.js","mtime":1604583336000},{"path":"/Users/leonelsentana/Robyn/docs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1604583336000},{"path":"/Users/leonelsentana/Robyn/docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1604583336000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL1VzZXJzL2xlb25lbHNlbnRhbmEvUm9ieW4vZG9jcy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyI7aW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydHttZHh9ZnJvbSdAbWR4LWpzL3JlYWN0JztleHBvcnQgY29uc3QgZnJvbnRNYXR0ZXI9e2lkOidkb2MzJyx0aXRsZTonUXVpY2sgU3RhcnQnfTtleHBvcnQgY29uc3QgbWV0YWRhdGE9eyJ1bnZlcnNpb25lZElkIjoiZG9jMyIsImlkIjoiZG9jMyIsImlzRG9jc0hvbWVQYWdlIjpmYWxzZSwidGl0bGUiOiJRdWljayBTdGFydCIsImRlc2NyaXB0aW9uIjoiT25jZSB5b3UgaGF2ZSBsb2FkZWQgYWxsIHNjcmlwdHMsIHdlIHdpbGwgZm9jdXMgb24gdGhlIOKAmC5leGVjLlLigJkgb25lIHRvIHF1aWNrbHkgc3RhcnQgdGVzdGluZyB0aGUgY29kZSBhbmQgdW5kZXJzdGFuZGluZyBob3cgdG8gdXNlIGl0LiBCZWxvdyB5b3Ugd2lsbCBmaW5kIHRoZSBzdGVwcyB0byBmb2xsb3c6Iiwic291cmNlIjoiQHNpdGUvZG9jcy9kb2MzLm1kIiwicGVybWFsaW5rIjoiL1JvYnluL2RvY3MvZG9jMyIsImVkaXRVcmwiOiJodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2tleHBlcmltZW50YWwvUm9ieW4vZG9jcy9kb2MzLm1kIiwic2lkZWJhciI6InNvbWVTaWRlYmFyIiwicHJldmlvdXMiOnsidGl0bGUiOiJJbnN0YWxsYXRpb24iLCJwZXJtYWxpbmsiOiIvUm9ieW4vZG9jcy8ifSwibmV4dCI6eyJ0aXRsZSI6IlN0ZXAtYnktc3RlcCBndWlkZSIsInBlcm1hbGluayI6Ii9Sb2J5bi9kb2NzL2RvYzEyIn19Oy8qIEBqc3ggbWR4ICovZXhwb3J0IGNvbnN0IHJpZ2h0VG9jPVt7dmFsdWU6J0xvYWQgcGFja2FnZXMnLGlkOidsb2FkLXBhY2thZ2VzJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidMb2FkIGRhdGEnLGlkOidsb2FkLWRhdGEnLGNoaWxkcmVuOltdfSx7dmFsdWU6J1NldCBnbG9iYWwgcGFyYW1ldGVycycsaWQ6J3NldC1nbG9iYWwtcGFyYW1ldGVycycsY2hpbGRyZW46W119LHt2YWx1ZTonU2V0IGNvcmVzIGZvciBwYXJhbGxlbCBjb21wdXRpbmcnLGlkOidzZXQtY29yZXMtZm9yLXBhcmFsbGVsLWNvbXB1dGluZycsY2hpbGRyZW46W119LHt2YWx1ZTonU2V0IG1vZGVsIGNvcmUgZmVhdHVyZXMnLGlkOidzZXQtbW9kZWwtY29yZS1mZWF0dXJlcycsY2hpbGRyZW46W119LHt2YWx1ZTonU2V0IGh5cGVycGFyYW1ldGVycyBib3VuZHMnLGlkOidzZXQtaHlwZXJwYXJhbWV0ZXJzLWJvdW5kcycsY2hpbGRyZW46W119LHt2YWx1ZTonU2V0IG1vZGVsIHRyYWluIGFuZCB0ZXN0IHNpemUnLGlkOidzZXQtbW9kZWwtdHJhaW4tYW5kLXRlc3Qtc2l6ZScsY2hpbGRyZW46W119LHt2YWx1ZTonRGVmaW5lIGV4cGVyaW1lbnRhbCByZXN1bHRzIGFuZCBjYWxpYnJhdGlvbicsaWQ6J2RlZmluZS1leHBlcmltZW50YWwtcmVzdWx0cy1hbmQtY2FsaWJyYXRpb24nLGNoaWxkcmVuOltdfSx7dmFsdWU6J0xvYWRpbmcgc2NyaXB0cyBhbmQgcnVubmluZyB0aGUgbW9kZWwnLGlkOidsb2FkaW5nLXNjcmlwdHMtYW5kLXJ1bm5pbmctdGhlLW1vZGVsJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidQbG90dGluZyByZXN1bHRzJyxpZDoncGxvdHRpbmctcmVzdWx0cycsY2hpbGRyZW46W119XTtjb25zdCBsYXlvdXRQcm9wcz17cmlnaHRUb2N9O2NvbnN0IE1EWExheW91dD0id3JhcHBlciI7ZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTURYQ29udGVudCh7Y29tcG9uZW50cywuLi5wcm9wc30pe3JldHVybiBtZHgoTURYTGF5b3V0LF9leHRlbmRzKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgicCIsbnVsbCxtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6InAifSxgT25jZSB5b3UgaGF2ZSBsb2FkZWQgYWxsIHNjcmlwdHMsIHdlIHdpbGwgZm9jdXMgb24gdGhlIOKAmC5leGVjLlLigJkgb25lIHRvIHF1aWNrbHkgc3RhcnQgdGVzdGluZyB0aGUgY29kZSBhbmQgdW5kZXJzdGFuZGluZyBob3cgdG8gdXNlIGl0LiBCZWxvdyB5b3Ugd2lsbCBmaW5kIHRoZSBzdGVwcyB0byBmb2xsb3c6YCksYCAgYCksbWR4KCJoMiIseyJpZCI6ImxvYWQtcGFja2FnZXMifSxgTG9hZCBwYWNrYWdlc2ApLG1keCgicCIsbnVsbCxgWW91IHdpbGwgdXRpbGl6ZSBzZXZlcmFsIG9wZW4gc291cmNlIHBhY2thZ2VzIHRvIHJ1biB0aGlzIGNvZGUsIHBsZWFzZSBpbnN0YWxsIGFuZCBsb2FkIGFsbCBsaWJyYXJpZXMgYmVmb3JlIHJ1bm5pbmcgaXQuIFlvdSB3aWxsIGZpbmQgc2V2ZXJhbCBwYWNrYWdlcyByZWxhdGVkIHRvIHdvcmtpbmcgd2l0aCBkYXRhIHRhYmxlcywgbG9vcHMsIHBhcmFsbGVsIGNvbXB1dGluZyBhbmQgcGxvdHRpbmcgcmVzdWx0cywgaG93ZXZlciB0aGUgcGFja2FnZSBmb3IgdGhlIGNvcmUgcmVncmVzc2lvbiBwcm9jZXNzIGlzIGxpYnJhcnkoZ2xtbmV0KSBmcm9tIHdoaWNoIHRoZSByaWRnZSByZWdyZXNzaW9uIHdpbGwgZXhlY3V0ZS4gYCksbWR4KCJoNCIseyJpZCI6InBsZWFzZS1tYWtlLXN1cmUtdG8taW5zdGFsbC1hbGwtbGlicmFyaWVzLWJlZm9yZS1ydW5uaW5nLXRoZS1zY3JpcHRzIn0sYFBsZWFzZSBtYWtlIHN1cmUgdG8gaW5zdGFsbCBhbGwgbGlicmFyaWVzIGJlZm9yZSBydW5uaW5nIHRoZSBzY3JpcHRzYCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLGBsaWJyYXJ5KGdsbW5ldCkKLi4uCi4uLgpgKSksbWR4KCJoMiIseyJpZCI6ImxvYWQtZGF0YSJ9LGBMb2FkIGRhdGFgKSxtZHgoInAiLG51bGwsYEZpcnN0IHlvdSB3aWxsIGxvYWQgdGhlIGRhdGEgYW5kIGNyZWF0ZSB0aGUgb3V0Y29tZSB2YXJpYWJsZS4gQXMgaW4gYW55IE1NTSwgdGhpcyBpcyBhIGRhdGFmcmFtZSB3aXRoIGEgbWluaW11bSBzZXQgb2YgY29sdW1ucyBkcyBhbmQgeSwgY29udGFpbmluZyB0aGUgZGF0ZSBhbmQgbnVtZXJpYyB2YWx1ZSByZXNwZWN0aXZlbHkuIFlvdSBtYXkgYWxzbyB3YW50IHRvIGFkZCByZWdyZXNzb3JzIHZhcmlhYmxlcyB0byBhY2NvdW50IGZvciBkaWZmZXJlbnQgbWFya2V0aW5nIGNoYW5uZWxzIGFuZCB0aGVpciBpbnZlc3RtZW50LCBpbXByZXNzaW9ucyBvciBhbnkgb3RoZXIgbWV0cmljIHRvIGRldGVybWluZSB0aGUgc2l6ZSBhbmQgaW1wYWN0IG9mIG1hcmtldGluZyBjYW1wYWlnbnMuClBsZWFzZSBoYXZlIGluIG1pbmQgdGhhdCB0aGlzIGF1dG9tYXRlZCBmaWxlIHJlYWRpbmcgc29sdXRpb24gcmVxdWlyZXMgdGhhdCB5b3UgYXJlIHVzaW5nIFJTdHVkaW8gYW5kIHRoYXQgaXQgd2lsbCBzZXQgeW91ciB3b3JraW5nIGRpcmVjdG9yeSBhcyB0aGUgc291cmNlIGZpbGUgbG9jYXRpb24gaW4gUnN0dWRpby5gKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksYCMjIyMgbG9hZCBkYXRhCnNjcmlwdF9wYXRoIDwtIHN0cl9zdWIocnN0dWRpb2FwaTo6Z2V0QWN0aXZlRG9jdW1lbnRDb250ZXh0KCkkcGF0aCwgc3RhcnQgPSAxLCBlbmQgPSBtYXgodW5saXN0KHN0cl9sb2NhdGVfYWxsKHJzdHVkaW9hcGk6OmdldEFjdGl2ZURvY3VtZW50Q29udGV4dCgpJHBhdGgsICIvIikpKSkKZHRfaW5wdXQgPC0gZnJlYWQocGFzdGUwKHNjcmlwdF9wYXRoLCdkZV9zaW11bGF0ZWRfZGF0YS5jc3YnKSkKaG9saWRheXMgPC0gZnJlYWQocGFzdGUwKHNjcmlwdF9wYXRoLCdnZW5lcmF0ZWRfaG9saWRheXMuY3N2JykKYCkpLG1keCgiaDIiLHsiaWQiOiJzZXQtZ2xvYmFsLXBhcmFtZXRlcnMifSxgU2V0IGdsb2JhbCBwYXJhbWV0ZXJzYCksbWR4KCJwIixudWxsLGBUaGUgbmV4dCBzdGVwIGlzIHRvIGRlZmluZSB0aGUgdmFyaWFibGVzIHlvdSB3aWxsIGJlIHdvcmtpbmcgd2l0aCBmcm9tIHRoZSBwcmV2aW91c2x5IHVwbG9hZGVkIGRhdGEuIFRoZXJlIGFyZSBkaWZmZXJlbnQgdHlwZXMgb2YgdmFyaWFibGVzLCBhcyBtZW50aW9uZWQgYWJvdmUsIHRoZSBtYWluIHRocmVlIG9uZXMgYXJlIGRlcGVuZGVudCAoc2V0X2RlcFZhck5hbWUpLCBkYXRlIChzZXRfZGF0ZVZhck5hbWUpIGFuZCBtZWRpYSB2b2x1bWUgKHNldF9tZWRpYVZhck5hbWUpLiBgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksYCMjIyMgZGVmaW5lIHZhcmlhYmxlcwpzZXRfZGF0ZVZhck5hbWUgPC0gYygiREFURSIpICMgZGF0ZSBtdXN0IGJlIGZvcm1hdCAiMjAyMC0wMS0wMSIKc2V0X2RlcFZhck5hbWUgPC0gYygicmV2ZW51ZSIpICMgdGhlcmUgc2hvdWxkIGJlIG9ubHkgb25lIGRlcGVuZGVudCB2YXJpYWJsZQpzZXRfbWVkaWFWYXJOYW1lIDwtIGMoInR2X1MiLCAiZmFjZWJvb2tfSSIgKSAjIGMoInJldmVudWUiLCAidHZfUyIsICJvb2hfUyIsICJwcmludF9TIiwgImZhY2Vib29rX0kiICAgICwgInNlYXJjaF9jbGlja3NfUCIsICJzZWFyY2hfaW1wc19QIiwgInNlYXJjaF9TIiwgImNvbXBldGl0b3Jfc2FsZXNfQiIpIHdlIHJlY29tbWVuZCB0byB1c2UgbWVkaWEgcHJlc3N1cmUgbWV0cmljcyBsaWtlIGltcHJlc3Npb25zLCBHUlAgZXRjIGZvciB0aGUgbW9kZWwuIElmIG5vdCBhcHBsaWNhYmxlLCB1c2Ugc3BlbmQgaW5zdGVhZApgKSksbWR4KCJwIixudWxsLGBNb3Jlb3ZlciwgWW91IHdpbGwgaGF2ZSB0byBkZWZpbmUgd2hpY2ggYmFzZSB2YXJpYWJsZXMgKHNldF9iYXNlVmFyTmFtZSkgcHJvdmlkZWQgYnkgdGhlIGNvZGUgb3IgdGhhdCB5b3Ugb3duIHRvIHVzZSwgd2UgcmVjb21tZW5kIGF0IGxlYXN0IHRvIGtlZXAgdGhlIHRyZW5kIGFuZCBob2xpZGF5cyBpbiB0aGUgbW9kZWwuYCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLGBzZXRfYmFzZVZhck5hbWUgPC0gYygiVFJFTkQiLCJIT0xJREFZUyIsIlNFQVNPTkFMIiwgImNvbXBldGl0b3Jfc2FsZXNfQiIpIAojIyMjIyAiVFJFTkQiLCAiSE9MSURBWVMiLCJTRUFTT05BTCIsICJXRUVLREFZIiwgIkhPVVJMWSIgYXJlIHByb3ZpZGVkIGJ5IHRoZSBjb2RlLiAKYCkpLG1keCgicCIsbnVsbCxgRmluYWxseSwgeW91IHdpbGwgZmluZCB0d28gdmFyaWFibGVzIGZvciBzaWduIGNvbnRyb2wsIHRoZXNlIHdpbGwgY29udHJvbCBmb3IgY29uc3RyYWluZWQgdmFyaWFibGVzIHRoYXQgdGhlb3JldGljYWxseSBoYXZlIHRvIGJlIGdyZWF0ZXIgdGhhbiB6ZXJvIChwb3NpdGl2ZSksIGxvd2VyIHRoYW4gemVybyAobmVnYXRpdmUpLCBvciBjYW4gdGFrZSBqdXN0IGFueSBjb2VmZmljaWVudCB2YWx1ZXMgKGRlZmF1bHQpLllvdSB3aWxsIHNlZSB0aGVyZSBhcmUgbWVkaWEgYW5kIGJhc2UgdmFyaWFibGVzIHNpZ24gY29udHJvbCBzbyB5b3Ugd2lsbCBoYXZlIHRvIGRlZmluZSB0aGVtIG9uIHNlcGFyYXRlIHZhcmlhYmxlczpgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksYHNldF9tZWRpYVZhclNpZ24gPC0gYygicG9zaXRpdmUiLCAicG9zaXRpdmUiKSAjIGMoImRlZmF1bHQiLCAicG9zaXRpdmUiLCBhbmQgIm5lZ2F0aXZlIiksIGNvbnRyb2wgdGhlIHNpZ25zIG9mIGNvZWZmaWNpZW50cyBmb3IgbWVkaWEgdmFyaWFibGVzCnNldF9iYXNlVmFyU2lnbiA8LSBjKCJkZWZhdWx0IiwgImRlZmF1bHQiLCAiZGVmYXVsdCIsICJuZWdhdGl2ZSIpICMgYygiZGVmYXVsdCIsICJwb3NpdGl2ZSIsIGFuZCAibmVnYXRpdmUiKSwgY29udHJvbCB0aGUgc2lnbnMgb2YgY29lZmZpY2llbnRzIGZvciBiYXNlIHZhcmlhYmxlcwpgKSksbWR4KCJoMiIseyJpZCI6InNldC1jb3Jlcy1mb3ItcGFyYWxsZWwtY29tcHV0aW5nIn0sYFNldCBjb3JlcyBmb3IgcGFyYWxsZWwgY29tcHV0aW5nYCksbWR4KCJwIixudWxsLGBOZXh0IHdlIHdpbGwgZGVmaW5lIHRoZSBhbW91bnQgb2YgY29yZXMgdG8gYWxsb2NhdGUgdG8gdGhlIG92ZXJhbGwgcHJvY2Vzcy4gUGxlYXNlIGJlYXIgaW4gbWluZCB0byBhbHdheXMgbGVhdmUgb25lIG9yIHR3byBjb3JlcyBvdXQgb2YgdGhlIHRvdGFsIG51bWJlciBvZiBjb3JlcyB5b3VyIG1hY2hpbmUgaGFzIHRvIHByZXZlbnQgeW91ciBPUyBmcm9tIGNyYXNoaW5nLmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSxgIyMjIyBzZXQgY29yZXMgZm9yIHBhcmFsbGVsIGNvbXB1dGluZwpyZWdpc3RlckRvU0VRKCk7IGRldGVjdENvcmVzKCkKc2V0Q29yZXMgPC0gNgpgKSksbWR4KCJoMiIseyJpZCI6InNldC1tb2RlbC1jb3JlLWZlYXR1cmVzIn0sYFNldCBtb2RlbCBjb3JlIGZlYXR1cmVzYCksbWR4KCJwIixudWxsLGBUaGUgZm9sbG93aW5nIHN0ZXAgaXMgY3J1Y2lhbCwgdGhpcyBpcyB3aGVyZSB5b3Ugd2lsbCBkZWZpbmUgaWYgeW91IHdpbGwgYmUgdXNpbmcgd2VpYnVsbCBvciBnZW9tZXRyaWMgYWRzdG9jayBmdW5jdGlvbnMgKFBsZWFzZSByZWZlciB0byB0aGUgdmFyaWFibGVzIHRyYW5zZm9ybWF0aW9uIHNlY3Rpb24gd2l0aGluIHRoaXMgZG9jdW1lbnRhdGlvbikuIFlvdSB3aWxsIGFsc28gbmVlZCB0byBkZWZpbmUgdGhlIG51bWJlciBvZiBpdGVyYXRpb25zIGZvciB0aGUgYWxnb3JpdGhtIHRvIGxvb3AgYW5kIGZpbmQgb3B0aW1hbCBoeXBlcnBhcmFtZXRlciB2YWx1ZXMuYCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLGAjIyMjIHNldCBtb2RlbCBjb3JlIGZlYXR1cmVzCmFkc3RvY2sgPC0gImdlb21ldHJpYyIgIyBnZW9tZXRyaWMgb3Igd2VpYnVsbAppdGVyTiA8LSAxMDAwICMgInJzIiBpdGVyYXRpb24gaXMgdGhlb3JldGljYWxseSB1bmxpbWl0ZWQuCmApKSxtZHgoImgyIix7ImlkIjoic2V0LWh5cGVycGFyYW1ldGVycy1ib3VuZHMifSxgU2V0IGh5cGVycGFyYW1ldGVycyBib3VuZHNgKSxtZHgoInAiLG51bGwsYFRoaXMgaXMgYW4gb3B0aW9uYWwgc3RlcCBhcyB0aGVyZSBpcyBhYnNvbHV0ZWx5IG5vIG5lZWQgdG8gY2hhbmdlIGl0LiBZb3UgbWF5IGVkaXQgYm91bmRzIGluIGNhc2UgeW91IGFscmVhZHkgZm91bmQgb3B0aW1hbCByYW5nZXMgZm9yIHBhcmFtZXRlcnMgYWZ0ZXIgc2V2ZXJhbCBpdGVyYXRpb25zLiBXZSByZWNvbW1lbmQgeW91IGxlYXZlIGl0IGFzIGl0IGlzIGF0IHRoZSBiZWdpbm5pbmcuYCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLGAjIyMjIHNldCBoeXBlcnBhcmFtZXRlcnMKbm8gbmVlZCB0byBjaGFuZ2UKaHlwQm91bmQgPC0gbGlzdCh0aGV0YXMgPSBjKDAsIDAuOTk5OSkgLHNoYXBlcyA9IGMoMCwgNSkgLHNjYWxlcyA9IGMoMC4wMDAxLCAwLjk5OTkpLCAKICAgICAgICAgICAgICAgICBhbHBoYXMgPSBjKDAsIDUpICxnYW1tYXMgPSBjKDAuMDAwMSwgMC45OTk5KSAsbGFtYmRhcyA9IGMoMCwgMSkpCmApKSxtZHgoImgyIix7ImlkIjoic2V0LW1vZGVsLXRyYWluLWFuZC10ZXN0LXNpemUifSxgU2V0IG1vZGVsIHRyYWluIGFuZCB0ZXN0IHNpemVgKSxtZHgoInAiLG51bGwsYE9uIHRoaXMgc3RlcCB5b3Ugd2lsbCBkZWZpbmUgdGhlIHBlcmNlbnRhZ2Ugb2YgeW91ciBkYXRhIHlvdSB3aWxsIGJlIHNhdmluZyB0byB0ZXN0IHRoZSBtb2RlbCBvbmNlIGl0IGhhcyBiZWVuIHRyYWluZWQgYW5kIHZhbGlkYXRlZC4gV2UgcmVjb21tZW5kIGFzc2lnbmluZyA4MCUgZm9yIHRyYWluaW5nIHB1cnBvc2VzLmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSxgc2V0X21vZF90cmFpbl9zaXplIDwtIDAuOCAjIDAuOCBtZWFucyB0YWtpbmcgODAlIG9mIGRhdGEgdG8gdHJhaW4gYW5kIDIwJSB0byB0ZXN0IHRoZSBtb2RlbApgKSksbWR4KCJoMiIseyJpZCI6ImRlZmluZS1leHBlcmltZW50YWwtcmVzdWx0cy1hbmQtY2FsaWJyYXRpb24ifSxgRGVmaW5lIGV4cGVyaW1lbnRhbCByZXN1bHRzIGFuZCBjYWxpYnJhdGlvbmApLG1keCgicCIsbnVsbCxgVGhlIGxhc3Qgc3RlcCBpbiB2YXJpYWJsZSBkZWZpbml0aW9uIGlzIHRvIGFkZCBpbmNyZW1lbnRhbCBzdHVkaWVzIGRhdGEgaW4gY2FzZSB5b3UgaGF2ZSBpbmZvcm1hdGlvbiBhdmFpbGFibGUsIHN1Y2ggYXMgY29udmVyc2lvbiBsaWZ0IGRhdGEgZm9yIEZhY2Vib29rLiBZb3Ugd2lsbCBuZWVkIHRvIGZpcnN0IGRlZmluZSBjYWxpYnJhdGVMaWZ0IDwtIFQgdG8gaW5jbHVkZSBjYWxpYnJhdGlvbiBpbiB5b3VyIG1vZGVsLiBDb25zZXF1ZW50bHksIHlvdSB3aWxsIG5lZWQgdG8gZGVmaW5lIHdoaWNoIGNoYW5uZWxzIHlvdSB3YW50IHRvIGRlZmluZSBjZXJ0YWluIGluY3JlbWVudGFsIHZhbHVlcyBmb3IgYXMgd2VsbCBhcywgc3RhcnQsIGVuZCBhbmQgaW5jcmVtZW50YWwgYWJzb2x1dGUgdmFsdWVzIChsaWZ0QWJzKSBmcm9tIHRoZSBzdHVkaWVzLiBgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksYGNhbGlicmF0ZUxpZnQgPC0gRgpzZXRfbGlmdCA8LSBkYXRhLnRhYmxlKGNoYW5uZWwgPSBjKCJmYWNlYm9va19JIiwgICJ0dl9TIiwgImZhY2Vib29rX0kiKSwKICAgICAgICAgICAgICAgICAgICAgICBsaWZ0U3RhcnREYXRlID0gYXMuRGF0ZShjKCIyMDE4LTA1LTAxIiwgIjIwMTctMTEtMjciLCAiMjAxOC0wNy0wMSIpKSwKICAgICAgICAgICAgICAgICAgICAgICBsaWZ0RW5kRGF0ZSA9IGFzLkRhdGUoYygiMjAxOC0wNi0xMCIsICIyMDE3LTEyLTAzIiwgIjIwMTgtMDctMjAiKSksCiAgICAgICAgICAgICAgICAgICAgICAgbGlmdEFicyA9IGMoNzAwMDAwMDAsIDUwMDAwMDAsIDUwMDAwMDAwKSkKYCkpLG1keCgiaDIiLHsiaWQiOiJsb2FkaW5nLXNjcmlwdHMtYW5kLXJ1bm5pbmctdGhlLW1vZGVsIn0sYExvYWRpbmcgc2NyaXB0cyBhbmQgcnVubmluZyB0aGUgbW9kZWxgKSxtZHgoInAiLG51bGwsYE9uY2UgeW91IGhhdmUgZGVmaW5lZCBhbGwgdGhlIHZhcmlhYmxlcyBmcm9tIHByZXZpb3VzIHN0ZXBzLCB5b3Ugd2lsbCBuZWVkIHRvIGZpbmFsbHkgZXhlY3V0ZSB0aGUg4oCYLmZ1bmMuUuKAmSBhbmQg4oCZLnBsb3QuUuKAmSBzY3JpcHRzIGluIG9yZGVyIHRvIHJ1biB0aGUgbW9kZWwuIFRoZXJlZm9yZSB5b3Ugd2lsbCBuZWVkIHRvIGxvYWQgdGhlIHNjcmlwdHMgZmlyc3QsIHJ1biB0aGUgbW9kZWxzIGFuZCBwcmludCByZXN1bHRzIGFzIHBlciBiZWxvdzogYCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLGAjIyMjIGxvYWQgc2NyaXB0cwpzb3VyY2UocGFzdGUoc2NyaXB0X3BhdGgsICJmYl9uZXh0Z2VuX21tbV92MTkuZnVuYy5SIiwgc2VwPSIiKSkKc291cmNlKHBhc3RlKHNjcmlwdF9wYXRoLCAiZmJfbmV4dGdlbl9tbW1fdjE5LmJheWVzLlIiLCBzZXA9IiIpKQpzb3VyY2UocGFzdGUoc2NyaXB0X3BhdGgsICJmYl9uZXh0Z2VuX21tbV92MTkucGxvdC5SIiwgc2VwPSIiKSkKYCkpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSxgIyMjIyBSdW4gbW9kZWwgc2NyaXB0cwppZiAoaHlwZXJwYXJhbU9wdGltID09ICJycyIpIHsKICBzeXNUaW1lUlMgPC0gc3lzdGVtLnRpbWUoewogICAgcmVzdWx0UlMgPC0gZi5tbW0oaHlwZXJwYXJhbWV0ZXJzLAogICAgICAgICAgICAgICAgICAgICAgaXRlclJTID0gaXRlck4sCiAgICAgICAgICAgICAgICAgICAgICBoeXBlcnBhcmFtT3B0aW0gPSAicnMiLAogICAgICAgICAgICAgICAgICAgICAgc2V0Q29yZXMgPSBzZXRDb3JlcwogICAgKX0pCiAgCiAgI3ByaW50KGhlYWQocmVzdWx0UlMkcmVzdWx0Q29sbGVjdCRyZXN1bHRIeXBQYXJhbSwgMTUpKQogIGJlc3RQYXJSUyA8LSBmLmdldEJlc3RQYXJSUyhyZXN1bHRSUywgY2FsaWJyYXRlTGlmdCkKICBiZXN0LnJlc3VsdFJTIDwtIGYubW1tKGJlc3RQYXJSUywgaHlwZXJwYXJhbU9wdGltID0gInJzIikKICAKfSB9CnJlZ2lzdGVyRG9TRVEoKTsgZ2V0RG9QYXJXb3JrZXJzKCkKYCkpLG1keCgiaDIiLHsiaWQiOiJwbG90dGluZy1yZXN1bHRzIn0sYFBsb3R0aW5nIHJlc3VsdHNgKSxtZHgoInAiLG51bGwsYE9uY2UgYWxsIGl0ZXJhdGlvbnMgYXJlIGZpbmlzaGVkIHlvdSB3aWxsIHByb2NlZWQgdG8gcGxvdCBkaWZmZXJlbnQgY2hhcnRzIHRoYXQgd2lsbCBoZWxwIHlvdSBhc3Nlc3MgdGhlIG1vZGVscyBhY2N1cmFjeSwgYnVzaW5lc3MgY29udHJpYnV0aW9uIGZvciBtYXJrZXRpbmcgY2hhbm5lbHMgYW5kIGJhc2VsaW5lIHZhcmlhYmxlcy5gKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksYCMjIyMgaW5zZXJ0IFRSVUUgaW50byBwbG90IGZ1bmN0aW9ucyB0byBwbG90CmYucGxvdEh5cGVyU2FtcChGKSAjIHBsb3QgbGF0aW4gaHlwZXJjdWJlIGh5cGVycGFyYW1ldGVyIHNhbXBsaW5nIGJhbGFuY2UKZi5wbG90VHJlbmRTZWFzb24oRikgIyBwbG90IHByb3BoZXQgdHJlbmQsIHNlYXNvbiBhbmQgaG9saWRheSBkZWNvbXBvc2l0aW9uCmYucGxvdEJlc3RNb2QoVCkgIyBwbG90IGJlc3QgbW9kZWwgd2l0aCA1IHBsb3RzOiBtZWRpYSBhZHN0b2NraW5nLCBzYWxlcyBkZWNvbXAsIGFjdHVhbCB2cyBmaXR0ZWQgb3ZlciB0aW1lLCBzYWxlcyBkZWNvbXAgYXJlYSBwbG90ICYgY2hhbm5lbCByZXNwb25zZSBjdXJ2ZQpmLnBsb3RNQVBFLlJTKEYpICMgcGxvdCBSUyBNQVBFIGNvbnZlcmdlbmNlLCBvbmx5IGZvciByYW5kb20gc2VhcmNoCmYucGxvdEJlc3RNb2RSZXNpZChGKSAjIHBsb3QgYmVzdCBtb2RlbCBkaWFnbm9zdGljczogcmVzaWR1YWwgdnMgZml0dGVkLCBRUSBwbG90IGFuZCByZXNpZHVhbCB2cy4gYWN0dWFsCmYucGxvdEh5cENvbnZlcmdlKEYpICMgcGxvdCBoeXBlcnBhcmFtZXRlciB2cyBNQVBFIGNvbnZlcmdlbmNlCmApKSk7fTtNRFhDb250ZW50LmlzTURYQ29tcG9uZW50PXRydWU7"},null]}