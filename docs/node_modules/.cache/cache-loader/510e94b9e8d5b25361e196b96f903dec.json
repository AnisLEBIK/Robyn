{"remainingRequest":"/Users/leonelsentana/Robyn/docs/node_modules/babel-loader/lib/index.js??ref--11-1!/Users/leonelsentana/Robyn/docs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/Users/leonelsentana/Robyn/docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/Users/leonelsentana/Robyn/docs/docs/quick-start.md","dependencies":[{"path":"/Users/leonelsentana/Robyn/docs/docs/quick-start.md","mtime":1615381793194},{"path":"/Users/leonelsentana/Robyn/docs/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-quick-start-md-72e.json","mtime":1617717045945},{"path":"/Users/leonelsentana/Robyn/docs/node_modules/cache-loader/dist/cjs.js","mtime":1614158977446},{"path":"/Users/leonelsentana/Robyn/docs/node_modules/babel-loader/lib/index.js","mtime":1614158977141},{"path":"/Users/leonelsentana/Robyn/docs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1614159022717},{"path":"/Users/leonelsentana/Robyn/docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1614159022317}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}