{"remainingRequest":"/Users/leonelsentana/Robyn/docs/node_modules/babel-loader/lib/index.js??ref--11-1!/Users/leonelsentana/Robyn/docs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/Users/leonelsentana/Robyn/docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/Users/leonelsentana/Robyn/docs/docs/doc8.md","dependencies":[{"path":"/Users/leonelsentana/Robyn/docs/docs/doc8.md","mtime":1604587771027},{"path":"/Users/leonelsentana/Robyn/docs/.docusaurus/docusaurus-plugin-content-docs/site-docs-doc-8-md-7c5.json","mtime":1605866086848},{"path":"/Users/leonelsentana/Robyn/docs/node_modules/cache-loader/dist/cjs.js","mtime":1604583336000},{"path":"/Users/leonelsentana/Robyn/docs/node_modules/babel-loader/lib/index.js","mtime":1604583336000},{"path":"/Users/leonelsentana/Robyn/docs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1604583336000},{"path":"/Users/leonelsentana/Robyn/docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1604583336000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}