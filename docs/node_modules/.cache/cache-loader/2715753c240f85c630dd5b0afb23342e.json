{"remainingRequest":"/Users/leonelsentana/Robyn/docs/node_modules/babel-loader/lib/index.js??ref--11-1!/Users/leonelsentana/Robyn/docs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/Users/leonelsentana/Robyn/docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/Users/leonelsentana/Robyn/docs/docs/calibration.md","dependencies":[{"path":"/Users/leonelsentana/Robyn/docs/docs/calibration.md","mtime":1617188780321},{"path":"/Users/leonelsentana/Robyn/docs/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-calibration-md-8f3.json","mtime":1617717045945},{"path":"/Users/leonelsentana/Robyn/docs/node_modules/cache-loader/dist/cjs.js","mtime":1614158977446},{"path":"/Users/leonelsentana/Robyn/docs/node_modules/babel-loader/lib/index.js","mtime":1614158977141},{"path":"/Users/leonelsentana/Robyn/docs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1614159022717},{"path":"/Users/leonelsentana/Robyn/docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1614159022317}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL1VzZXJzL2xlb25lbHNlbnRhbmEvUm9ieW4vZG9jcy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyI7aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20iL1VzZXJzL2xlb25lbHNlbnRhbmEvUm9ieW4vZG9jcy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSI7aW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydHttZHh9ZnJvbSdAbWR4LWpzL3JlYWN0JztleHBvcnQgdmFyIGZyb250TWF0dGVyPXtpZDonY2FsaWJyYXRpb24nLHRpdGxlOidDYWxpYnJhdGlvbiB1c2luZyBleHBlcmltZW50YWwgcmVzdWx0cyd9O2V4cG9ydCB2YXIgbWV0YWRhdGE9eyJ1bnZlcnNpb25lZElkIjoiY2FsaWJyYXRpb24iLCJpZCI6ImNhbGlicmF0aW9uIiwiaXNEb2NzSG9tZVBhZ2UiOmZhbHNlLCJ0aXRsZSI6IkNhbGlicmF0aW9uIHVzaW5nIGV4cGVyaW1lbnRhbCByZXN1bHRzIiwiZGVzY3JpcHRpb24iOiJDYWxpYnJhdGlvbiBjb25jZXB0Iiwic291cmNlIjoiQHNpdGUvZG9jcy9jYWxpYnJhdGlvbi5tZCIsInNsdWciOiIvY2FsaWJyYXRpb24iLCJwZXJtYWxpbmsiOiIvUm9ieW4vZG9jcy9jYWxpYnJhdGlvbiIsImVkaXRVcmwiOiJodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2tleHBlcmltZW50YWwvUm9ieW4vZG9jcy9jYWxpYnJhdGlvbi5tZCIsInZlcnNpb24iOiJjdXJyZW50Iiwic2lkZWJhciI6InNvbWVTaWRlYmFyIiwicHJldmlvdXMiOnsidGl0bGUiOiJBdXRvbWF0ZWQgaHlwZXJwYXJhbWV0ZXIgc2VsZWN0aW9uIGFuZCBvcHRpbWl6YXRpb24iLCJwZXJtYWxpbmsiOiIvUm9ieW4vZG9jcy9hdXRvbWF0ZWQtaHlwZXJwYXJhbWV0ZXItc2VsZWN0aW9uLW9wdGltaXphdGlvbiJ9LCJuZXh0Ijp7InRpdGxlIjoiT3V0cHV0cyBhbmQgZGlhZ25vc3RpY3MiLCJwZXJtYWxpbmsiOiIvUm9ieW4vZG9jcy9vdXRwdXRzLWRpYWdub3N0aWNzIn19Oy8qIEBqc3hSdW50aW1lIGNsYXNzaWMgKi8gLyogQGpzeCBtZHggKi9pbXBvcnQgdXNlQmFzZVVybCBmcm9tJ0Bkb2N1c2F1cnVzL3VzZUJhc2VVcmwnO2V4cG9ydCB2YXIgdG9jPVt7dmFsdWU6J0NhbGlicmF0aW9uIGNvbmNlcHQnLGlkOidjYWxpYnJhdGlvbi1jb25jZXB0JyxjaGlsZHJlbjpbXX0se3ZhbHVlOidDYWxpYnJhdGlvbiBpbiB0aGUgY29kZScsaWQ6J2NhbGlicmF0aW9uLWluLXRoZS1jb2RlJyxjaGlsZHJlbjpbXX1dO3ZhciBsYXlvdXRQcm9wcz17dG9jOnRvY307dmFyIE1EWExheW91dD0id3JhcHBlciI7ZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTURYQ29udGVudChfcmVmKXt2YXIgY29tcG9uZW50cz1fcmVmLmNvbXBvbmVudHMscHJvcHM9X29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZixbImNvbXBvbmVudHMiXSk7cmV0dXJuIG1keChNRFhMYXlvdXQsX2V4dGVuZHMoe30sbGF5b3V0UHJvcHMscHJvcHMse2NvbXBvbmVudHM6Y29tcG9uZW50cyxtZHhUeXBlOiJNRFhMYXlvdXQifSksbWR4KCJoMyIseyJpZCI6ImNhbGlicmF0aW9uLWNvbmNlcHQifSwiQ2FsaWJyYXRpb24gY29uY2VwdCIpLG1keCgicCIsbnVsbCwiQnkgYXBwbHlpbmcgcmVzdWx0cyBmcm9tIHJhbmRvbWl6ZWQgY29udHJvbGxlZC1leHBlcmltZW50cywgeW91IG1heSBpbXByb3ZlIHRoZVxuYWNjdXJhY3kgb2YgeW91ciBtYXJrZXRpbmcgbWl4IG1vZGVscyBkcmFtYXRpY2FsbHkuIEl0IGlzIHJlY29tbWVuZGVkIHRvIHJ1blxudGhlc2Ugb24gYSByZWN1cnJlbnQgYmFzaXMgdG8ga2VlcCB0aGUgbW9kZWwgY2FsaWJyYXRlZCBwZXJtYW5lbnRseS4gSW4gZ2VuZXJhbCxcbndlIHdhbnQgdG8gY29tcGFyZSB0aGUgZXhwZXJpbWVudCByZXN1bHQgd2l0aCB0aGUgTU1NIGVzdGltYXRpb24gb2YgYSBtYXJrZXRpbmdcbmNoYW5uZWwuIENvbmNlcHR1YWxseSwgdGhpcyBtZXRob2QgaXMgbGlrZSBhIEJheWVzaWFuIG1ldGhvZCwgaW4gd2hpY2ggd2UgdXNlXG5leHBlcmltZW50IHJlc3VsdHMgYXMgYSBwcmlvciB0byBzaHJpbmsgdGhlIGNvZWZmaWNpZW50cyBvZiBtZWRpYSB2YXJpYWJsZXMuIEFcbmdvb2QgZXhhbXBsZSBvZiB0aGVzZSB0eXBlcyBvZiBleHBlcmltZW50cyBpcyBGYWNlYm9va1x1MjAxOXMgY29udmVyc2lvbiBsaWZ0IHRvb2xcbndoaWNoIGNhbiBoZWxwIGd1aWRlIHRoZSBtb2RlbCB0b3dhcmRzIGEgc3BlY2lmaWMgcmFuZ2Ugb2YgaW5jcmVtZW50YWwgdmFsdWVzLiIpLG1keCgiaW1nIix7YWx0OiJDYWxpYnJhdGlvbiBjaGFydCIsc3JjOnVzZUJhc2VVcmwoJy9pbWcvY2FsaWJyYXRpb24xLnBuZycpfSksbWR4KCJwIixudWxsLCJUaGUgZmlndXJlIGlsbHVzdHJhdGVzIHRoZSBjYWxpYnJhdGlvbiBwcm9jZXNzIGZvciBvbmUgTU1NIGNhbmRpZGF0ZSBtb2RlbC5cbiIsbWR4KCJhIix7cGFyZW50TmFtZToicCIsImhyZWYiOiJodHRwczovL2ZhY2Vib29rcmVzZWFyY2guZ2l0aHViLmlvL25ldmVyZ3JhZC8ifSxtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6ImEifSwiRmFjZWJvb2tcdTIwMTlzIE5ldmVyZ3JhZCBncmFkaWVudC1mcmVlIG9wdGltaXphdGlvbiBwbGF0Zm9ybSIpKSwiIGFsbG93cyB1cyB0byBpbmNsdWRlIHRoZSAiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LCJNQVBFKGNhbCxmYikiKSwiIGFzIGEgdGhpcmQgb3B0aW1pemF0aW9uIHNjb3JlIGJlc2lkZXMgTm9ybWFsaXplZCBSb290IE1lYW4gU3F1YXJlIEVycm9yICgiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LCJOUk1TRSIpLCIpIGFuZCAiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LCJkZWNvbXAuUlNTRCIpLCIgcmF0aW8gKFBsZWFzZSByZWZlciB0byB0aGUgYXV0b21hdGVkIGh5cGVycGFyYW1ldGVyIHNlbGVjdGlvbiBhbmQgb3B0aW1pemF0aW9uIGZvciBmdXJ0aGVyIGRldGFpbHMpIHByb3ZpZGluZyBhIHNldCBvZiAiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LCJQYXJldG8gb3B0aW1hbCBtb2RlbCBzb2x1dGlvbnMiKSwiIHRoYXQgbWluaW1pemUgYW5kIGNvbnZlcmdlIHRvIGEgc2V0IG9mIFBhcmV0byBvcHRpbWFsIG1vZGVsIGNhbmRpZGF0ZXMuIFRoaXMgY2FsaWJyYXRpb24gbWV0aG9kIGNhbiBiZSBhcHBsaWVkIHRvIG90aGVyIG1lZGlhIGNoYW5uZWxzIHdoaWNoIHJ1biBleHBlcmltZW50cywgdGhlIG1vcmUgY2hhbm5lbHMgdGhhdCBhcmUgY2FsaWJyYXRlZCwgdGhlIG1vcmUgYWNjdXJhdGUgdGhlIE1NTSBtb2RlbC4iKSxtZHgoImgzIix7ImlkIjoiY2FsaWJyYXRpb24taW4tdGhlLWNvZGUifSwiQ2FsaWJyYXRpb24gaW4gdGhlIGNvZGUiKSxtZHgoInAiLG51bGwsIllvdSB3aWxsIGZpbmQgYSB2YXJpYWJsZSBjYWxsZWQgJ2FjdGl2YXRlX2NhbGlicmF0aW9uJyB0byBiZSBkZWZpbmVkIGFzIFQgKFRydWUpIG9yIEYgKEZhbHNlKS4gUGxlYXNlIHNldCBpdCB0byBUIChUcnVlKSBpZiB5b3Ugd291bGQgbGlrZSB0byBhcHBseSBjYWxpYnJhdGlvbi5cbkNvbnNlcXVlbnRseSwgeW91IHdpbGwgaGF2ZSB0byBhZGQgZ3JvdW5kLXRydXRoIGRhdGEgc3VjaCBhcyBjb252ZXJzaW9uIGxpZnQgZGF0YSBmcm9tIEZhY2Vib29rLCBnZW8gdGVzdHMgb3IgTXVsdGktdG91Y2ggYXR0cmlidXRpb24uIE1vcmVvdmVyLCB5b3Ugd2lsbCBuZWVkIHRvIGRlZmluZSB3aGljaCBjaGFubmVscyB5b3Ugd2FudCB0byBkZWZpbmUgY2VydGFpbiBpbmNyZW1lbnRhbCB2YWx1ZXMgZm9yLCBhcyB3ZWxsIGFzLCB0aGUgc3RhcnQgZGF0ZSwgZW5kIGRhdGUgYW5kIGluY3JlbWVudGFsIGFic29sdXRlIHZhbHVlcyAobGlmdEFicykgZnJvbSB0aGUgc3R1ZGllcy4gSW4gdGhlIGV4YW1wbGUgYmVsb3cgdGhlcmUgYXJlIHR3byBmYWNlYm9vayBzdHVkaWVzIHdpdGggZGF0ZXM6IGZyb20gMjAxOC0wNS0wMSB1bnRpbCAyMDE4LTA2LTEwIGFuZCBmcm9tIDIwMTgtMDctMDEgdW50aWwgMjAxOC0wNy0yMC4gQXMgd2VsbCBhcywgYSBUViBnZW8gc3R1ZHkgZnJvbSAyMDE3LTExLTI3IHVudGlsIDIwMTctMTItMDMuIFdpdGggYSB0b3RhbCBsaWZ0IGluIHRoZSBhYnNvbHV0ZSB2YWx1ZSBmb3IgdGhlIHJlc3BvbnNlIHZhcmlhYmxlIChTYWxlcykgb2YgJDQwMCwwMDAgZm9yIHRoZSBmaXJzdCBGYWNlYm9vayBzdHVkeSwgJDMwMCwwMDAgZm9yIHRoZSBUViBzdHVkeSBhbmQgb2YgJDIwMCwwMDAgZm9yIHRoZSBsYXN0IEZhY2Vib29rIHN0dWR5LiAgIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIix7cGFyZW50TmFtZToicHJlIn0sImFjdGl2YXRlX2NhbGlicmF0aW9uIDwtIEYgIyBTd2l0Y2ggdG8gVFJVRSB0byBjYWxpYnJhdGUgbW9kZWwuXG4jIHNldF9saWZ0IDwtIGRhdGEudGFibGUoY2hhbm5lbCA9IGMoXCJmYWNlYm9va19JXCIsICBcInR2X1NcIiwgXCJmYWNlYm9va19JXCIpLFxuIyAgICAgICAgICAgICAgICAgICAgICAgIGxpZnRTdGFydERhdGUgPSBhcy5EYXRlKGMoXCIyMDE4LTA1LTAxXCIsIFwiMjAxNy0xMS0yN1wiLCBcIjIwMTgtMDctMDFcIikpLFxuIyAgICAgICAgICAgICAgICAgICAgICAgIGxpZnRFbmREYXRlID0gYXMuRGF0ZShjKFwiMjAxOC0wNi0xMFwiLCBcIjIwMTctMTItMDNcIiwgXCIyMDE4LTA3LTIwXCIpKSxcbiMgICAgICAgICAgICAgICAgICAgICAgICBsaWZ0QWJzID0gYyg0MDAwMDAsIDMwMDAwMCwgMjAwMDAwKSlcbiIpKSk7fTtNRFhDb250ZW50LmlzTURYQ29tcG9uZW50PXRydWU7"},null]}